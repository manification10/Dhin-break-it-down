{"version":3,"sources":["logo.svg","VideoApp.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","VideoApp","player","state","video","src","type","console","log","this","duration","from","to","controls","poster","width","height","onReady","onPlayerReady","bind","onPlay","onVideoPlay","onPause","onVideoPause","onTimeUpdate","onVideoTimeUpdate","onSeeking","onVideoSeeking","onSeeked","onVideoSeeked","onEnd","onVideoEnd","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,kC,uKC4D5BC,E,2MAxDXC,OAAS,G,EACTC,MAAQ,CACJC,MAAO,CACHC,IAAK,qFACLC,KAAM,c,6EAGAJ,GACZK,QAAQC,IAAI,oBAAqBN,GACjCO,KAAKP,OAASA,I,kCAGNQ,GACRH,QAAQC,IAAI,oBAAqBE,K,mCAGxBA,GACTH,QAAQC,IAAI,oBAAqBE,K,wCAGnBA,GACdH,QAAQC,IAAI,iBAAkBE,K,qCAGnBA,GACXH,QAAQC,IAAI,kBAAmBE,K,oCAGrBC,EAAMC,GAChBL,QAAQC,IAAR,4BAAiCG,EAAjC,eAA4CC,M,mCAG9CL,QAAQC,IAAI,iB,+BAIZ,OACI,6BACI,kBAAC,IAAD,CACIK,UAAU,EACVR,IAAKI,KAAKN,MAAMC,MAAMC,IACtBS,OAAQL,KAAKN,MAAMC,MAAMU,OACzBC,MAAM,MACNC,OAAO,MACPC,QAASR,KAAKS,cAAcC,KAAKV,MACjCW,OAAQX,KAAKY,YAAYF,KAAKV,MAC9Ba,QAASb,KAAKc,aAAaJ,KAAKV,MAChCe,aAAcf,KAAKgB,kBAAkBN,KAAKV,MAC1CiB,UAAWjB,KAAKkB,eAAeR,KAAKV,MACpCmB,SAAUnB,KAAKoB,cAAcV,KAAKV,MAClCqB,MAAOrB,KAAKsB,WAAWZ,KAAKV,a,GAnDrBuB,aCYRC,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAClB,kBAAC,EAAD,SCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,a","file":"static/js/main.a6bdbac5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport VideoPlayer from 'react-video-js-player';\n\nclass VideoApp extends Component {\n    player = {}\n    state = {\n        video: {\n            src: \"http://file-examples.com/wp-content/uploads/2017/04/file_example_MP4_480_1_5MG.mp4\",\n            type: 'video/mp4'\n        }\n    }\n    onPlayerReady(player){\n      console.log(\"Player is ready: \", player);\n      this.player = player;\n  }\n\n  onVideoPlay(duration){\n      console.log(\"Video played at: \", duration);\n  }\n\n  onVideoPause(duration){\n      console.log(\"Video paused at: \", duration);\n  }\n\n  onVideoTimeUpdate(duration){\n      console.log(\"Time updated: \", duration);\n  }\n\n  onVideoSeeking(duration){\n      console.log(\"Video seeking: \", duration);\n  }\n\n  onVideoSeeked(from, to){\n      console.log(`Video seeked from ${from} to ${to}`);\n  }\n  onVideoEnd(){\n    console.log(\"Video ended\");\n}\n\nrender() {\n    return (\n        <div>\n            <VideoPlayer\n                controls={true}\n                src={this.state.video.src}\n                poster={this.state.video.poster}\n                width=\"720\"\n                height=\"420\"\n                onReady={this.onPlayerReady.bind(this)}\n                onPlay={this.onVideoPlay.bind(this)}\n                onPause={this.onVideoPause.bind(this)}\n                onTimeUpdate={this.onVideoTimeUpdate.bind(this)}\n                onSeeking={this.onVideoSeeking.bind(this)}\n                onSeeked={this.onVideoSeeked.bind(this)}\n                onEnd={this.onVideoEnd.bind(this)}\n            />\n        </div>\n    );\n}\n}\nexport default VideoApp;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport VideoApp from './VideoApp.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <VideoApp />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}